{"ast":null,"code":"var _jsxFileName = \"/home/mido/cs/csproj/a5/city-zip-search/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport { Input, Display } from './components';\n\nconst axios = require('axios');\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.updateCity = async val => {\n      if (val.length < 1) {\n        console.log(\"No input, City name\");\n        return;\n      }\n\n      const link = this.state.base_link_city.concat(val.toUpperCase());\n      await this.updateData(link, 'city');\n    };\n\n    this.updateZip = async val => {\n      if (val.length < 5 || isNaN(val)) {\n        console.log(\"Please enter a valid zip code\");\n        return;\n      }\n\n      const link = this.state.base_link_zip.concat(val);\n      await this.updateData(link, 'zip');\n    };\n\n    this.updateData = async (link, field) => {\n      //We can now make the API call, pull the data from the\n      //response and fill our :result: state\n      await axios.get(link).then(response => {\n        //Collect the data from the API call\n        return this.collectData(response);\n      }).then(data => {\n        //data contains an array, each element a result\n        //in the query\n        //If there are no results, log and return\n        if (data.length < 1) {\n          console.log(\"No results\");\n          return;\n        } //can now fill the result array\n        //this.state.fxnRoute[field](data);\n        //console.log(\"The APP RAW DATA: \", data);\n        //console.log(\"The APP FIELD: \", field);\n\n\n        this.fillData(data, field);\n      }).catch(error => {\n        //this.handleSearchError(error);\n        console.log(\"Unable to load data\");\n      });\n    };\n\n    this.fillData = (data, field) => {\n      let items = []; //Cycle through each item and pull data and store\n      // it in the :results: value\n\n      for (let i = 0; i < data.length; i++) {\n        let item = [data[i].LocationText, data[i].Long, data[i].Lat, data[i].EstimatedPopulation];\n        items.push(item);\n      } //update :results: with the new data\n\n\n      this.updateResultsState(items, field);\n    };\n\n    this.updateResultsState = async (data, field) => {\n      await this.setState(prevState => {\n        let results = Object.assign({}, prevState.results);\n        results[field] = data;\n        return {\n          results\n        };\n      });\n      return;\n    };\n\n    this.collectData = async response => {\n      let data = response.data;\n      return data;\n    };\n\n    this.resetResult = () => {\n      Object.keys(this.state.results).forEach(function (key) {\n        this.state.results[key] = [];\n      });\n    };\n\n    this.state = {\n      fxnRoute: {\n        city: this.updateCity,\n        zip: this.updateZip\n      },\n      results: {\n        zip: [],\n        city: []\n      },\n      base_link_zip: 'http://ctp-zip-api.herokuapp.com/zip/',\n      base_link_city: 'http://ctp-zip-api.herokuapp.com/city/'\n    };\n  }\n  /*\n  entry point for city input\n    @params: val - city name\n    @returns: none\n    @post: a link to an API call using the city name is generated and passed\n           to the updateData method\n  */\n\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.results === this.state.results) {\n      console.log(\"no change to fields\");\n      return;\n    }\n\n    console.log('update');\n    console.log(\"zip res: \", this.state.results['zip']);\n    console.log(\"city res: \", this.state.results['city']);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"header\", {\n      className: \"App-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 3\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"split left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 3\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"inputfield zipIn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      onSubmit: this.updateZip,\n      fieldName: \"Zip\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"display\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(Display, {\n      arr: this.state.results['zip'],\n      field: \"zip\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 6\n      }\n    })))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"split right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 10\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"inputfield cityIn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      onSubmit: this.updateCity,\n      fieldName: \"City\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"display\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(Display, {\n      arr: this.state.results['city'],\n      field: \"city\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 6\n      }\n    })))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/mido/cs/csproj/a5/city-zip-search/src/App.js"],"names":["React","Component","Input","Display","axios","require","App","constructor","props","updateCity","val","length","console","log","link","state","base_link_city","concat","toUpperCase","updateData","updateZip","isNaN","base_link_zip","field","get","then","response","collectData","data","fillData","catch","error","items","i","item","LocationText","Long","Lat","EstimatedPopulation","push","updateResultsState","setState","prevState","results","Object","assign","resetResult","keys","forEach","key","fxnRoute","city","zip","componentDidUpdate","prevProps","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\nimport {Input, Display} from './components';\nconst axios = require('axios');\n\nclass App extends Component {\n    constructor(props){\n\tsuper(props);\n\tthis.state = {\n\t    fxnRoute: {city: this.updateCity, zip: this.updateZip},\n\t    results: {zip:[], city:[]},\n\t    base_link_zip: 'http://ctp-zip-api.herokuapp.com/zip/',\n\t    base_link_city: 'http://ctp-zip-api.herokuapp.com/city/'\n\t};\n    }\n    \n\n    /*\n    entry point for city input\n      @params: val - city name\n      @returns: none\n      @post: a link to an API call using the city name is generated and passed\n             to the updateData method\n    */\n    updateCity = async (val) => {\n\tif (val.length < 1) {\n\t    console.log(\"No input, City name\");\n\t    return;\n\t}\n\t\n\tconst link = this.state.base_link_city.concat(val.toUpperCase());\n\tawait this.updateData(link, 'city');\n    }\n\n    \n    /*\n    entry point for zip input\n      @params: val - zip code\n      @returns: none\n      @post: a link to an API call using the zip code is generated and passed\n             to the updateData method\n    */\n    updateZip = async (val) => {\n\tif (val.length < 5 || isNaN(val)) {\n\t    console.log(\"Please enter a valid zip code\");\n\t    return;\n\t}\n\n\tconst link = this.state.base_link_zip.concat(val);\n\tawait this.updateData(link, 'zip');\n    }\n    \n    updateData = async (link, field) => {\n\t//We can now make the API call, pull the data from the\n\t//response and fill our :result: state\n\tawait axios.get(link)\n\t .then( response => {\n\t     //Collect the data from the API call\n\t     return this.collectData(response);\n\t  })\n\t .then( data => {\n\t     //data contains an array, each element a result\n\t     //in the query\n\t     //If there are no results, log and return\n\t     if(data.length < 1) {\n\t \t console.log(\"No results\");\n\t \t return;\n\t     }\n         \n\t     //can now fill the result array\n\t     //this.state.fxnRoute[field](data);\n\t     //console.log(\"The APP RAW DATA: \", data);\n\t     //console.log(\"The APP FIELD: \", field);\n\t     this.fillData(data, field);\n\t })\n\t .catch(error => {\n\t     //this.handleSearchError(error);\n\t     console.log(\"Unable to load data\");\n\t });\t\n    }    \n    \n    \n    //Method for filling the :results: array with\n    //the data corresponding to the location, longitude\n    //latitude, and population.\n    fillData = (data, field) => {\n\tlet items = [];\n\t\n\t//Cycle through each item and pull data and store\n\t// it in the :results: value\n\tfor (let i=0; i < data.length; i++) {\n\t    let item = [data[i].LocationText,\n\t                data[i].Long,\n\t\t\tdata[i].Lat,\n\t\t\tdata[i].EstimatedPopulation];\n\t    items.push(item);\n\t}\n\n\t//update :results: with the new data\n\tthis.updateResultsState(items, field);\n    }\n\n\n    updateResultsState = async (data, field) => {\n\tawait this.setState(prevState => {\n\t    let results = Object.assign({}, prevState.results);\n\t    results[field] = data;\n\t    return {results};\n\t});\n\treturn;\n    }\n\n    //method for pulling the data value from\n    //the axios payload\n    collectData = async (response) => {\n\tlet data = response.data;\n\treturn data;\n    }\n\n    resetResult = ()=> {\n\tObject.keys(this.state.results).forEach(function(key){ this.state.results[key] = []; });\n    }\n\n    componentDidUpdate(prevProps, prevState){\n\tif (prevState.results === this.state.results){\n\t    console.log(\"no change to fields\");\n\t    return;\n\t}\n\tconsole.log('update');\n\tconsole.log(\"zip res: \", this.state.results['zip']);\n\tconsole.log(\"city res: \", this.state.results['city']);\n\t\n    }\n\n    render(){\n\treturn (\n\t       <div className=\"App\">\n\t\t<header className=\"App-header\">\n\t\t</header>\n\n\t\t<div className=\"split left\">\n\t\t <div className=\"center\">\n\t\t  <div className=\"inputfield zipIn\">\n\t           <Input onSubmit={this.updateZip} fieldName='Zip'/>\n   \t\t  </div>\n\t\t  <div className=\"display\">\n\t\t   <Display arr={this.state.results['zip']} field='zip'/>\n\t\t  </div>\n\t\t </div>\n\t\t</div>\n\n\t    \n\t        <div className=\"split right\">\n\t\t <div className=\"center\">\n\t\t  <div className=\"inputfield cityIn\">\n\t           <Input onSubmit={this.updateCity} fieldName='City'/>\n   \t\t  </div>\n\t\t  <div className=\"display\">\n\t\t   <Display arr={this.state.results['city']} field='city'/>\n\t\t  </div>\n\t\t </div>\n\t\t</div>\n\n\t       </div>\n\t);\n    }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}