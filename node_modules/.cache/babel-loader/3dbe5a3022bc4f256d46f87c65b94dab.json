{"ast":null,"code":"var _jsxFileName = \"/home/mido/cs/csproj/a5/city-search/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport { Input, Display } from './components';\n\nconst axios = require('axios');\n\nclass App extends Component {\n  constructor(props) {\n    super(props); //http://ctp-zip-api.herokuapp.com/zip/\n\n    this.updateCity = async val => {\n      //If city nam is empty output an error\n      if (val.length < 5) {\n        console.log(\"No input, City name\");\n        return;\n      }\n\n      const link = this.state.base_link_city.concat(val);\n      await this.updateData(link, 'city');\n    };\n\n    this.updateZip = async val => {\n      console.log(\"the val is: \", val);\n      console.log(\"the length is: \", val.length); //If the zip code is empty or greater than 5 digits\n      // output an error\n\n      if (val.length < 5 || isNaN(val)) {\n        console.log(\"Please enter a valid zip code\");\n        return;\n      } //concantenate the user submitted zip code to the\n      // link for the API call\n\n\n      const link = this.state.base_link_zip.concat(val);\n      await this.updateData(link, 'zip');\n    };\n\n    this.updateData = async (link, field) => {\n      //We can now make the API call, pull the data from the\n      //response and fill our :result: state\n      await axios.get(link).then(response => {\n        //Collect the data from the API call\n        return this.collectData(response);\n      }).then(data => {\n        //data contains an array, each element a result\n        //in the query\n        //If there are no results, log and return\n        if (data.length < 1) {\n          console.log(\"No results\");\n          return;\n        } //can now fill the result array\n\n\n        this.state.fxnRoute[field](data);\n      }).catch(error => {\n        //this.handleSearchError(error);\n        console.log(\"Unable to load data\");\n      });\n    };\n\n    this.fillData = async (data, field) => {\n      let items = []; //Cycle through each item and pull data and store\n      // it in the :results: value\n\n      for (let i = 0; i < data.length; i++) {\n        console.log(\"data: \", data);\n        let item = [data[i].LocationText, data[i].Long, data[i].Lat, data[i].EstimatedPopulation];\n        /*\n        this.setState( prevState => ({\n        result: [...prevState.result, item]\n        }));*/\n\n        items.push(item);\n      }\n\n      await this.setState(prevState => {\n        let fieldObj = Object.assign({}, prevState.results);\n        fieldObj.field = items;\n        return {\n          fieldObj\n        };\n      });\n    };\n\n    this.collectData = async response => {\n      let data = response.data;\n      return data;\n    };\n\n    this.resetResult = () => {\n      Object.keys(this.state.result).forEach(function (key) {\n        this.state.result[key] = [];\n      });\n    };\n\n    this.state = {\n      fxnRoute: {\n        city: this.updateCity,\n        zip: this.updateZip\n      },\n      results: {\n        zip: [],\n        city: []\n      },\n      base_link_zip: 'http://ctp-zip-api.herokuapp.com/zip/',\n      base_link_city: 'http://ctp-zip-api.herokuapp.com/city/:cityname'\n    };\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.result === this.state.result) {\n      console.log(\"no change to fields\");\n      return;\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"header\", {\n      className: \"App-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 3\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"split left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 3\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"inputfield\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      onSubmit: this.updateZip,\n      fieldName: \"Zip\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"display\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(Display, {\n      arr: this.state.results['zip'],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 6\n      }\n    })))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"split right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 10\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"inputfield\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      onSubmit: this.updateCity,\n      fieldName: \"City\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"display\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(Display, {\n      arr: this.state.results['city'],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 6\n      }\n    })))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/mido/cs/csproj/a5/city-search/src/App.js"],"names":["React","Component","Input","Display","axios","require","App","constructor","props","updateCity","val","length","console","log","link","state","base_link_city","concat","updateData","updateZip","isNaN","base_link_zip","field","get","then","response","collectData","data","fxnRoute","catch","error","fillData","items","i","item","LocationText","Long","Lat","EstimatedPopulation","push","setState","prevState","fieldObj","Object","assign","results","resetResult","keys","result","forEach","key","city","zip","componentDidUpdate","prevProps","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\nimport {Input, Display} from './components';\nconst axios = require('axios');\n\nclass App extends Component {\n    constructor(props){\n\tsuper(props);\n\t//http://ctp-zip-api.herokuapp.com/zip/\n\tthis.state = {\n\t    fxnRoute: {city: this.updateCity, zip: this.updateZip},\n\t    results: {zip:[], city:[]},\n\t    base_link_zip: 'http://ctp-zip-api.herokuapp.com/zip/',\n\t    base_link_city: 'http://ctp-zip-api.herokuapp.com/city/:cityname'\n\t};\n    }\n\n    updateCity = async (val) => {\n\t//If city nam is empty output an error\n\tif (val.length < 5) {\n\t    console.log(\"No input, City name\");\n\t    return;\n\t}\n\t\n\tconst link = this.state.base_link_city.concat(val);\n\tawait this.updateData(link, 'city');\n    }\n    \n    updateZip = async (val) => {\n\tconsole.log(\"the val is: \", val);\n\tconsole.log(\"the length is: \", val.length);\n\t//If the zip code is empty or greater than 5 digits\n\t// output an error\n\tif (val.length < 5 || isNaN(val)) {\n\t    console.log(\"Please enter a valid zip code\");\n\t    return;\n\t}\n\n\t//concantenate the user submitted zip code to the\n\t// link for the API call\n\tconst link = this.state.base_link_zip.concat(val);\n\tawait this.updateData(link, 'zip');\n    }\n    \n    updateData = async (link, field) => {\n\t//We can now make the API call, pull the data from the\n\t//response and fill our :result: state\n\tawait axios.get(link)\n\t .then( response => {\n\t     //Collect the data from the API call\n\t     return this.collectData(response);\n\t  })\n\t .then( data => {\n\t     //data contains an array, each element a result\n\t     //in the query\n\t     //If there are no results, log and return\n\t     if(data.length < 1) {\n\t\t console.log(\"No results\");\n\t\t return;\n\t     }\n\n\t     //can now fill the result array\n\t     this.state.fxnRoute[field](data);\n\t })\n\t .catch(error => {\n\t     //this.handleSearchError(error);\n\t     console.log(\"Unable to load data\");\n\t });\n\t\n    }\n    \n    \n    //Method for filling the :results: array with\n    //the data corresponding to the location, longitude\n    //latitude, and population.\n    fillData = async (data, field) => {\n\tlet items = [];\n\t//Cycle through each item and pull data and store\n\t// it in the :results: value\n\tfor (let i=0; i < data.length; i++) {\n\t    console.log(\"data: \", data);\n\t    let item = [data[i].LocationText,\n\t                data[i].Long,\n\t\t\tdata[i].Lat,\n\t\t\tdata[i].EstimatedPopulation];\n\t    /*\n\t    this.setState( prevState => ({\n\t\tresult: [...prevState.result, item]\n\t\t}));*/\n\t    items.push(item);\n\t}\n\tawait this.setState(prevState => {\n\t    let fieldObj = Object.assign({}, prevState.results);\n\t    fieldObj.field = items; \n\t    return {fieldObj};\n\t});\n    }\n\n\n    //method for pulling the data value from\n    //the axios payload\n    collectData = async (response) => {\n\tlet data = response.data;\n\treturn data;\n    }\n\n    resetResult = ()=> {\n\tObject.keys(this.state.result).forEach(function(key){ this.state.result[key] = []; });\n    }\n\n    componentDidUpdate(prevProps, prevState){\n\tif (prevState.result === this.state.result){\n\t    console.log(\"no change to fields\");\n\t    return;\n\t}\n\t\n\t\n    }\n\n    render(){\n\t\n\treturn (\n\t       <div className=\"App\">\n\t\t<header className=\"App-header\">\n\t\t</header>\n\n\t\t<div className=\"split left\">\n\t\t <div className = \"center\">\n\t\t  <div className=\"inputfield\">\n\t           <Input onSubmit={this.updateZip} fieldName='Zip'/>\n   \t\t  </div>\n\t\t \n\t\t  <div className=\"display\">\n\t\t   <Display arr={this.state.results['zip']}/>\n\t\t  </div>\n\t\t </div>\n\t\t</div>\n\n\t        <div className=\"split right\">\n\t\t <div className=\"center\">\n\t\t  <div className=\"inputfield\">\n\t           <Input onSubmit={this.updateCity} fieldName='City'/>\n   \t\t  </div>\n\t\t \n\t\t  <div className=\"display\">\n\t\t   <Display arr={this.state.results['city']}/>\n\t\t  </div>\n\t\t </div>\n\t\t</div>\n\n\t       </div>\n\t);\n    }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}